0.UML图的基本图示含义
    继承关系：空心三角形+实线
    实线接口：空心三角形+虚线
    聚合关系：空心菱形+实线箭头（弱拥有）
    合成关系：实心菱形+实线箭头（强拥有+基数）
    关联关系：实线箭头（基数）
    依赖关系：虚线箭头

    +表示public，-表示private，#表示protected
    接口有矩形表示法<<>>、棒棒糖表示法
    抽象类用斜体表示

一.创建型模式
    1.普通工厂模式
        （1）普通工厂模式
        （2）多个工厂方法模式
        （3）静态工厂方法模式
        return new Sender();

    2.抽象工厂模式
        一个工厂接口、两个工厂实现类

    3.单例模式
        6种
    4.建造者模式

    5.原型模式
        深复制、浅复制

二.结构型模式
    6.适配器模式（Adapter）
        （1）类的适配器模式
        （2）对象的适配器模式
        （3）接口的适配器模式

    7.装饰模式（Decorator）IO
        两个类同时实现一个接口，动态调节实现类的功能

    8.代理模式（Proxy）Spring的AOP
        实现类中super()的作用，接口不是没有构造器吗？

    9.外观模式（Facade）
        为了解决类与类之间的依赖关系的。像Spring，将类关系配置到配置文件

    10.桥接模式（Bridge）
        将抽象化与实现化解耦，使得二者可以独立变化。像我们常用的JDBC桥DriverManager一样，
        JDBC进行在数据库之间进行切换，基本不需要动太多的代码，甚至丝毫不用动

    11.组合模式（Composite）？？
        又叫部分-整体模式在处理类似树形结构的问题时比较方便
        使用场景：将多个对象组合在一起进行操作，常用于表示树形结构中，例如二叉树，数等

    12.享元模式（Flyweight）
        实现对象的共享，即共享池（如多线程链接池、数据库连接池）。通常与工厂模式一起使用

三.行为型模式
    13.策略模式（strategy）

    14.

Vector Enumeration
    比如ByteArrayInputStream和DataInputStream，
    DataInputStream不是为了提供和被装饰对象一样的方法，而是提供更高级的方法。




1.装饰模式
    有效地把类的核心职责和装饰功能区分开，去除了相关类中重复的装饰逻辑
    例子：服装搭配系统

2.适配器模式(对象)
    一般用于开发后期、维护期，开发中使用第三方组件也会使用。
    例子：亡羊补牢，篮球翻译适配器