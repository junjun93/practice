<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 该配置文件说明插件需要如何生成，以及生成对应的包名，路径等信息。 还有重要的就是我们要生成的实体类所对应的的表或者试图 -->
<generatorConfiguration>
	<!--generatorConfiguration标签包含三个子标签，properties，classPathEntry，context。 注意三个子标签的顺序不能更改。 -->

	<!--properties用于指定外部属性元素，最多可以配置1个。 properties标签包含resource和url两个属性，只能使用其中一个来指定properties文件。 
		然后可以在配置文件中通过${property}引用。 -->
	<properties resource="mybatisGenerator/mybatis_generator.properties" />

	<!--classPathEntry标签可以配置多个，也可不配置 常见用法通过location属性指定驱动的路径。 -->
<!-- 	<classPathEntry location="${jdbc_driverLocation}" /> -->

	<!--context标签，重要！至少配置一个，也可配置多个 context标签用于指定生成一组对象环境，数据库、生成的类型和数据库中的表等。 -->
	<context id="MBG" targetRuntime="MyBatis3"
		defaultModelType="conditional">
		<!-- 注意以下标签的顺序:property*,plugin*,commentGenerator?,jdbcConnection, javaTypeResolver?,javaModelGenerator,sqlMapGenerator?, 
			javaClientGenerator?,table+ -->
		<!-- 自动生成toString方法 -->
		<plugin type="org.mybatis.generator.plugins.ToStringPlugin" />
		<!-- 自动生成equals方法和hashcode方法 -->
		<!-- <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/> -->

		<commentGenerator>
			<!-- 是否去除自动生成的注释 true：是 ： false:否 -->
			<property name="suppressAllComments" value="true" />
			<!-- 不希望生成的注释中包含时间戳 -->
			<property name="suppressDate" value="true" />
			<!-- 是否 自动为每一个生成的类创建一个构造方法 -->
			<property name="constructorBased" value="false" />
			<!-- 注释是否添加数据表的备注信息，默认false -->
			<property name="addRemarkComments" value="false" />
		</commentGenerator>

		<!-- 数据库连接 -->
		<jdbcConnection driverClass="${jdbc_driver}"
			connectionURL="${jdbc_url}" userId="${jdbc_username}"
			password="${jdbc_password}">
			<!-- 针对oracle数据库 -->
			<property name="remarksReporting" value="true"></property>
			<!-- 针对mysql数据库 -->
			<!-- <property name="useInformationSchema" value="true"></property> -->
		</jdbcConnection>

		<!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 
			和 NUMERIC 类型解析为java.math.BigDecimal -->
		<javaTypeResolver>
			<property name="forceBigDecimals" value="false" />
		</javaTypeResolver>

		<!-- 生成model模型，对应的包，存放位置可以指定具体的路径,如/ProjectName/src，也可以使用MAVEN来自动生成 -->
		<javaModelGenerator targetPackage="${modelPackage}"
			targetProject="${targetProject}">
			<!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
<!-- 			<property name="enableSubPackages" value="true" /> -->
			<!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
			<property name="trimStrings" value="true" />
			<!-- 是否根据数据库字段命名 -->
			<property name="useActualColumnNames" value="true" />
			<!-- 是否 自动为每一个生成的类创建一个构造方法 -->
			<property name="constructorBased" value="false" />
			<!-- 是否合并而非覆盖已有代码 -->
			<property name="mergeable" value="true"></property>
		</javaModelGenerator>

		<!--对应的xml mapper文件 -->
		<sqlMapGenerator targetPackage="${sqlMapperPackage}"
			targetProject="${targetProject}">
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
<!-- 			<property name="enableSubPackages" value="true" /> -->
		</sqlMapGenerator>

		<!-- 对应的dao接口 -->
		<javaClientGenerator type="XMLMAPPER"
			targetPackage="${daoMapperPackage}" targetProject="${targetProject}">
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
<!-- 			<property name="enableSubPackages" value="true" /> -->
		</javaClientGenerator>

		<!-- 表名对应生成的实体 -->
		<table tableName="${tableName}"
			domainObjectName="${domainObjectName}" enableCountByExample="false"
			enableUpdateByExample="false" enableDeleteByExample="false"
			enableSelectByExample="false" selectByExampleQueryId="false">
			<!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法， 比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate -->
			<property name="useActualColumnNames" value="false" />
		</table>
	</context>
</generatorConfiguration>